/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.cmu.dynet.internal;

public class dynet_swig {
  public static void throwRuntimeError() {
    dynet_swigJNI.throwRuntimeError();
  }

  public static void throwSubRuntimeError() {
    dynet_swigJNI.throwSubRuntimeError();
  }

  public static void throwLogicError() {
    dynet_swigJNI.throwLogicError();
  }

  public static void throwSubLogicError() {
    dynet_swigJNI.throwSubLogicError();
  }

  public static void throwException() {
    dynet_swigJNI.throwException();
  }

  public static void throwSubException() {
    dynet_swigJNI.throwSubException();
  }

  public static void throwUnknown() {
    dynet_swigJNI.throwUnknown();
  }

  public static void raiseSignal(int signal) {
    dynet_swigJNI.raiseSignal(signal);
  }

  public static void readNullPtr() {
    dynet_swigJNI.readNullPtr();
  }

  public static void writeNullPtr() {
    dynet_swigJNI.writeNullPtr();
  }

  public static int mtrace() {
    return dynet_swigJNI.mtrace();
  }

  public static int muntrace() {
    return dynet_swigJNI.muntrace();
  }

  public static SWIGTYPE_p_unsigned_int new_uintp() {
    long cPtr = dynet_swigJNI.new_uintp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_int copy_uintp(long value) {
    long cPtr = dynet_swigJNI.copy_uintp(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static void delete_uintp(SWIGTYPE_p_unsigned_int obj) {
    dynet_swigJNI.delete_uintp(SWIGTYPE_p_unsigned_int.getCPtr(obj));
  }

  public static void uintp_assign(SWIGTYPE_p_unsigned_int obj, long value) {
    dynet_swigJNI.uintp_assign(SWIGTYPE_p_unsigned_int.getCPtr(obj), value);
  }

  public static long uintp_value(SWIGTYPE_p_unsigned_int obj) {
    return dynet_swigJNI.uintp_value(SWIGTYPE_p_unsigned_int.getCPtr(obj));
  }

  public static SWIGTYPE_p_int new_intp() {
    long cPtr = dynet_swigJNI.new_intp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static SWIGTYPE_p_int copy_intp(int value) {
    long cPtr = dynet_swigJNI.copy_intp(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void delete_intp(SWIGTYPE_p_int obj) {
    dynet_swigJNI.delete_intp(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static void intp_assign(SWIGTYPE_p_int obj, int value) {
    dynet_swigJNI.intp_assign(SWIGTYPE_p_int.getCPtr(obj), value);
  }

  public static int intp_value(SWIGTYPE_p_int obj) {
    return dynet_swigJNI.intp_value(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static SWIGTYPE_p_float new_floatp() {
    long cPtr = dynet_swigJNI.new_floatp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static SWIGTYPE_p_float copy_floatp(float value) {
    long cPtr = dynet_swigJNI.copy_floatp(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static void delete_floatp(SWIGTYPE_p_float obj) {
    dynet_swigJNI.delete_floatp(SWIGTYPE_p_float.getCPtr(obj));
  }

  public static void floatp_assign(SWIGTYPE_p_float obj, float value) {
    dynet_swigJNI.floatp_assign(SWIGTYPE_p_float.getCPtr(obj), value);
  }

  public static float floatp_value(SWIGTYPE_p_float obj) {
    return dynet_swigJNI.floatp_value(SWIGTYPE_p_float.getCPtr(obj));
  }

  public static float as_scalar(Tensor t) {
    return dynet_swigJNI.as_scalar(Tensor.getCPtr(t), t);
  }

  public static FloatVector as_vector(Tensor v) {
    return new FloatVector(dynet_swigJNI.as_vector(Tensor.getCPtr(v), v), true);
  }

  public static Expression input(ComputationGraph g, float s) {
    return new Expression(dynet_swigJNI.input__SWIG_0(ComputationGraph.getCPtr(g), g, s), true);
  }

  public static Expression input(ComputationGraph g, SWIGTYPE_p_float ps) {
    return new Expression(dynet_swigJNI.input__SWIG_1(ComputationGraph.getCPtr(g), g, SWIGTYPE_p_float.getCPtr(ps)), true);
  }

  public static Expression input(ComputationGraph g, Dim d, FloatVector pdata) {
    return new Expression(dynet_swigJNI.input__SWIG_2(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d, FloatVector.getCPtr(pdata), pdata), true);
  }

  public static Expression input(ComputationGraph g, Dim d, UnsignedVector ids, FloatVector data, float defdata) {
    return new Expression(dynet_swigJNI.input__SWIG_3(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d, UnsignedVector.getCPtr(ids), ids, FloatVector.getCPtr(data), data, defdata), true);
  }

  public static Expression input(ComputationGraph g, Dim d, UnsignedVector ids, FloatVector data) {
    return new Expression(dynet_swigJNI.input__SWIG_4(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d, UnsignedVector.getCPtr(ids), ids, FloatVector.getCPtr(data), data), true);
  }

  public static Expression parameter(ComputationGraph g, Parameter p) {
    return new Expression(dynet_swigJNI.parameter__SWIG_0(ComputationGraph.getCPtr(g), g, Parameter.getCPtr(p), p), true);
  }

  public static Expression parameter(ComputationGraph g, LookupParameter lp) {
    return new Expression(dynet_swigJNI.parameter__SWIG_1(ComputationGraph.getCPtr(g), g, LookupParameter.getCPtr(lp), lp), true);
  }

  public static Expression const_parameter(ComputationGraph g, Parameter p) {
    return new Expression(dynet_swigJNI.const_parameter__SWIG_0(ComputationGraph.getCPtr(g), g, Parameter.getCPtr(p), p), true);
  }

  public static Expression const_parameter(ComputationGraph g, LookupParameter lp) {
    return new Expression(dynet_swigJNI.const_parameter__SWIG_1(ComputationGraph.getCPtr(g), g, LookupParameter.getCPtr(lp), lp), true);
  }

  public static Expression lookup(ComputationGraph g, LookupParameter p, long index) {
    return new Expression(dynet_swigJNI.lookup__SWIG_0(ComputationGraph.getCPtr(g), g, LookupParameter.getCPtr(p), p, index), true);
  }

  public static Expression lookup(ComputationGraph g, LookupParameter p, SWIGTYPE_p_unsigned_int pindex) {
    return new Expression(dynet_swigJNI.lookup__SWIG_1(ComputationGraph.getCPtr(g), g, LookupParameter.getCPtr(p), p, SWIGTYPE_p_unsigned_int.getCPtr(pindex)), true);
  }

  public static Expression const_lookup(ComputationGraph g, LookupParameter p, long index) {
    return new Expression(dynet_swigJNI.const_lookup__SWIG_0(ComputationGraph.getCPtr(g), g, LookupParameter.getCPtr(p), p, index), true);
  }

  public static Expression const_lookup(ComputationGraph g, LookupParameter p, SWIGTYPE_p_unsigned_int pindex) {
    return new Expression(dynet_swigJNI.const_lookup__SWIG_1(ComputationGraph.getCPtr(g), g, LookupParameter.getCPtr(p), p, SWIGTYPE_p_unsigned_int.getCPtr(pindex)), true);
  }

  public static Expression lookup(ComputationGraph g, LookupParameter p, UnsignedVector indices) {
    return new Expression(dynet_swigJNI.lookup__SWIG_2(ComputationGraph.getCPtr(g), g, LookupParameter.getCPtr(p), p, UnsignedVector.getCPtr(indices), indices), true);
  }

  public static Expression const_lookup(ComputationGraph g, LookupParameter p, UnsignedVector indices) {
    return new Expression(dynet_swigJNI.const_lookup__SWIG_2(ComputationGraph.getCPtr(g), g, LookupParameter.getCPtr(p), p, UnsignedVector.getCPtr(indices), indices), true);
  }

  public static Expression zeros(ComputationGraph g, Dim d) {
    return new Expression(dynet_swigJNI.zeros(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d), true);
  }

  public static Expression zeroes(ComputationGraph g, Dim d) {
    return new Expression(dynet_swigJNI.zeroes(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d), true);
  }

  public static Expression ones(ComputationGraph g, Dim d) {
    return new Expression(dynet_swigJNI.ones(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d), true);
  }

  public static Expression constant(ComputationGraph g, Dim d, float val) {
    return new Expression(dynet_swigJNI.constant(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d, val), true);
  }

  public static Expression random_normal(ComputationGraph g, Dim d) {
    return new Expression(dynet_swigJNI.random_normal(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d), true);
  }

  public static Expression random_bernoulli(ComputationGraph g, Dim d, float p, float scale) {
    return new Expression(dynet_swigJNI.random_bernoulli__SWIG_0(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d, p, scale), true);
  }

  public static Expression random_bernoulli(ComputationGraph g, Dim d, float p) {
    return new Expression(dynet_swigJNI.random_bernoulli__SWIG_1(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d, p), true);
  }

  public static Expression random_uniform(ComputationGraph g, Dim d, float left, float right) {
    return new Expression(dynet_swigJNI.random_uniform(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d, left, right), true);
  }

  public static Expression random_gumbel(ComputationGraph g, Dim d, float mu, float beta) {
    return new Expression(dynet_swigJNI.random_gumbel__SWIG_0(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d, mu, beta), true);
  }

  public static Expression random_gumbel(ComputationGraph g, Dim d, float mu) {
    return new Expression(dynet_swigJNI.random_gumbel__SWIG_1(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d, mu), true);
  }

  public static Expression random_gumbel(ComputationGraph g, Dim d) {
    return new Expression(dynet_swigJNI.random_gumbel__SWIG_2(ComputationGraph.getCPtr(g), g, Dim.getCPtr(d), d), true);
  }

  public static Expression exprMinus(Expression x) {
    return new Expression(dynet_swigJNI.exprMinus__SWIG_0(Expression.getCPtr(x), x), true);
  }

  public static Expression exprPlus(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.exprPlus__SWIG_0(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression exprPlus(Expression x, float y) {
    return new Expression(dynet_swigJNI.exprPlus__SWIG_1(Expression.getCPtr(x), x, y), true);
  }

  public static Expression exprPlus(float x, Expression y) {
    return new Expression(dynet_swigJNI.exprPlus__SWIG_2(x, Expression.getCPtr(y), y), true);
  }

  public static Expression exprMinus(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.exprMinus__SWIG_1(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression exprMinus(float x, Expression y) {
    return new Expression(dynet_swigJNI.exprMinus__SWIG_2(x, Expression.getCPtr(y), y), true);
  }

  public static Expression exprMinus(Expression x, float y) {
    return new Expression(dynet_swigJNI.exprMinus__SWIG_3(Expression.getCPtr(x), x, y), true);
  }

  public static Expression exprTimes(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.exprTimes__SWIG_0(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression exprTimes(Expression x, float y) {
    return new Expression(dynet_swigJNI.exprTimes__SWIG_1(Expression.getCPtr(x), x, y), true);
  }

  public static Expression exprTimes(float y, Expression x) {
    return new Expression(dynet_swigJNI.exprTimes__SWIG_2(y, Expression.getCPtr(x), x), true);
  }

  public static Expression exprDivide(Expression x, float y) {
    return new Expression(dynet_swigJNI.exprDivide(Expression.getCPtr(x), x, y), true);
  }

  public static Expression affine_transform(ExpressionVector xs) {
    return new Expression(dynet_swigJNI.affine_transform(ExpressionVector.getCPtr(xs), xs), true);
  }

  public static Expression sum(ExpressionVector xs) {
    return new Expression(dynet_swigJNI.sum(ExpressionVector.getCPtr(xs), xs), true);
  }

  public static Expression sum_elems(Expression x) {
    return new Expression(dynet_swigJNI.sum_elems(Expression.getCPtr(x), x), true);
  }

  public static Expression moment_elems(Expression x, long r) {
    return new Expression(dynet_swigJNI.moment_elems(Expression.getCPtr(x), x, r), true);
  }

  public static Expression mean_elems(Expression x) {
    return new Expression(dynet_swigJNI.mean_elems(Expression.getCPtr(x), x), true);
  }

  public static Expression std_elems(Expression x) {
    return new Expression(dynet_swigJNI.std_elems(Expression.getCPtr(x), x), true);
  }

  public static Expression sum_batches(Expression x) {
    return new Expression(dynet_swigJNI.sum_batches(Expression.getCPtr(x), x), true);
  }

  public static Expression moment_batches(Expression x, long r) {
    return new Expression(dynet_swigJNI.moment_batches(Expression.getCPtr(x), x, r), true);
  }

  public static Expression mean_batches(Expression x) {
    return new Expression(dynet_swigJNI.mean_batches(Expression.getCPtr(x), x), true);
  }

  public static Expression std_batches(Expression x) {
    return new Expression(dynet_swigJNI.std_batches(Expression.getCPtr(x), x), true);
  }

  public static Expression sum_dim(Expression x, UnsignedVector dims, boolean b) {
    return new Expression(dynet_swigJNI.sum_dim__SWIG_0(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims, b), true);
  }

  public static Expression sum_dim(Expression x, UnsignedVector dims) {
    return new Expression(dynet_swigJNI.sum_dim__SWIG_1(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims), true);
  }

  public static Expression sum_rows(Expression x) {
    return new Expression(dynet_swigJNI.sum_rows(Expression.getCPtr(x), x), true);
  }

  public static Expression sum_cols(Expression x) {
    return new Expression(dynet_swigJNI.sum_cols(Expression.getCPtr(x), x), true);
  }

  public static Expression moment_dim(Expression x, UnsignedVector dims, long r, boolean b, long n) {
    return new Expression(dynet_swigJNI.moment_dim__SWIG_0(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims, r, b, n), true);
  }

  public static Expression moment_dim(Expression x, UnsignedVector dims, long r, boolean b) {
    return new Expression(dynet_swigJNI.moment_dim__SWIG_1(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims, r, b), true);
  }

  public static Expression moment_dim(Expression x, UnsignedVector dims, long r) {
    return new Expression(dynet_swigJNI.moment_dim__SWIG_2(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims, r), true);
  }

  public static Expression mean_dim(Expression x, UnsignedVector dims, boolean b, long n) {
    return new Expression(dynet_swigJNI.mean_dim__SWIG_0(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims, b, n), true);
  }

  public static Expression mean_dim(Expression x, UnsignedVector dims, boolean b) {
    return new Expression(dynet_swigJNI.mean_dim__SWIG_1(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims, b), true);
  }

  public static Expression mean_dim(Expression x, UnsignedVector dims) {
    return new Expression(dynet_swigJNI.mean_dim__SWIG_2(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims), true);
  }

  public static Expression std_dim(Expression x, UnsignedVector dims, boolean b, long n) {
    return new Expression(dynet_swigJNI.std_dim__SWIG_0(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims, b, n), true);
  }

  public static Expression std_dim(Expression x, UnsignedVector dims, boolean b) {
    return new Expression(dynet_swigJNI.std_dim__SWIG_1(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims, b), true);
  }

  public static Expression std_dim(Expression x, UnsignedVector dims) {
    return new Expression(dynet_swigJNI.std_dim__SWIG_2(Expression.getCPtr(x), x, UnsignedVector.getCPtr(dims), dims), true);
  }

  public static Expression average(ExpressionVector xs) {
    return new Expression(dynet_swigJNI.average(ExpressionVector.getCPtr(xs), xs), true);
  }

  public static Expression sqrt(Expression x) {
    return new Expression(dynet_swigJNI.sqrt(Expression.getCPtr(x), x), true);
  }

  public static Expression abs(Expression x) {
    return new Expression(dynet_swigJNI.abs(Expression.getCPtr(x), x), true);
  }

  public static Expression erf(Expression x) {
    return new Expression(dynet_swigJNI.erf(Expression.getCPtr(x), x), true);
  }

  public static Expression tanh(Expression x) {
    return new Expression(dynet_swigJNI.tanh(Expression.getCPtr(x), x), true);
  }

  public static Expression exp(Expression x) {
    return new Expression(dynet_swigJNI.exp(Expression.getCPtr(x), x), true);
  }

  public static Expression square(Expression x) {
    return new Expression(dynet_swigJNI.square(Expression.getCPtr(x), x), true);
  }

  public static Expression cube(Expression x) {
    return new Expression(dynet_swigJNI.cube(Expression.getCPtr(x), x), true);
  }

  public static Expression lgamma(Expression x) {
    return new Expression(dynet_swigJNI.lgamma(Expression.getCPtr(x), x), true);
  }

  public static Expression log(Expression x) {
    return new Expression(dynet_swigJNI.log(Expression.getCPtr(x), x), true);
  }

  public static Expression logistic(Expression x) {
    return new Expression(dynet_swigJNI.logistic(Expression.getCPtr(x), x), true);
  }

  public static Expression rectify(Expression x) {
    return new Expression(dynet_swigJNI.rectify(Expression.getCPtr(x), x), true);
  }

  public static Expression elu(Expression x, float alpha) {
    return new Expression(dynet_swigJNI.elu__SWIG_0(Expression.getCPtr(x), x, alpha), true);
  }

  public static Expression elu(Expression x) {
    return new Expression(dynet_swigJNI.elu__SWIG_1(Expression.getCPtr(x), x), true);
  }

  public static Expression selu(Expression x) {
    return new Expression(dynet_swigJNI.selu(Expression.getCPtr(x), x), true);
  }

  public static Expression silu(Expression x, float beta) {
    return new Expression(dynet_swigJNI.silu__SWIG_0(Expression.getCPtr(x), x, beta), true);
  }

  public static Expression silu(Expression x) {
    return new Expression(dynet_swigJNI.silu__SWIG_1(Expression.getCPtr(x), x), true);
  }

  public static Expression softsign(Expression x) {
    return new Expression(dynet_swigJNI.softsign(Expression.getCPtr(x), x), true);
  }

  public static Expression pow(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.pow(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression min(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.min(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression max(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.max__SWIG_0(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression max(ExpressionVector xs) {
    return new Expression(dynet_swigJNI.max__SWIG_1(ExpressionVector.getCPtr(xs), xs), true);
  }

  public static Expression dot_product(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.dot_product(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression cmult(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.cmult(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression cdiv(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.cdiv(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression colwise_add(Expression x, Expression bias) {
    return new Expression(dynet_swigJNI.colwise_add(Expression.getCPtr(x), x, Expression.getCPtr(bias), bias), true);
  }

  public static Expression softmax(Expression x, long d) {
    return new Expression(dynet_swigJNI.softmax__SWIG_0(Expression.getCPtr(x), x, d), true);
  }

  public static Expression softmax(Expression x) {
    return new Expression(dynet_swigJNI.softmax__SWIG_1(Expression.getCPtr(x), x), true);
  }

  public static Expression log_softmax(Expression x) {
    return new Expression(dynet_swigJNI.log_softmax__SWIG_0(Expression.getCPtr(x), x), true);
  }

  public static Expression log_softmax(Expression x, UnsignedVector restriction) {
    return new Expression(dynet_swigJNI.log_softmax__SWIG_1(Expression.getCPtr(x), x, UnsignedVector.getCPtr(restriction), restriction), true);
  }

  public static Expression logsumexp_dim(Expression x, long d) {
    return new Expression(dynet_swigJNI.logsumexp_dim(Expression.getCPtr(x), x, d), true);
  }

  public static Expression logsumexp(ExpressionVector xs) {
    return new Expression(dynet_swigJNI.logsumexp(ExpressionVector.getCPtr(xs), xs), true);
  }

  public static Expression pickneglogsoftmax(Expression x, long v) {
    return new Expression(dynet_swigJNI.pickneglogsoftmax__SWIG_0(Expression.getCPtr(x), x, v), true);
  }

  public static Expression pickneglogsoftmax(Expression x, SWIGTYPE_p_unsigned_int pv) {
    return new Expression(dynet_swigJNI.pickneglogsoftmax__SWIG_1(Expression.getCPtr(x), x, SWIGTYPE_p_unsigned_int.getCPtr(pv)), true);
  }

  public static Expression pickneglogsoftmax(Expression x, UnsignedVector v) {
    return new Expression(dynet_swigJNI.pickneglogsoftmax__SWIG_2(Expression.getCPtr(x), x, UnsignedVector.getCPtr(v), v), true);
  }

  public static Expression hinge(Expression x, long index, float m) {
    return new Expression(dynet_swigJNI.hinge__SWIG_0(Expression.getCPtr(x), x, index, m), true);
  }

  public static Expression hinge(Expression x, long index) {
    return new Expression(dynet_swigJNI.hinge__SWIG_1(Expression.getCPtr(x), x, index), true);
  }

  public static Expression hinge(Expression x, SWIGTYPE_p_unsigned_int pindex, float m) {
    return new Expression(dynet_swigJNI.hinge__SWIG_2(Expression.getCPtr(x), x, SWIGTYPE_p_unsigned_int.getCPtr(pindex), m), true);
  }

  public static Expression hinge(Expression x, SWIGTYPE_p_unsigned_int pindex) {
    return new Expression(dynet_swigJNI.hinge__SWIG_3(Expression.getCPtr(x), x, SWIGTYPE_p_unsigned_int.getCPtr(pindex)), true);
  }

  public static Expression hinge(Expression x, UnsignedVector indices, float m) {
    return new Expression(dynet_swigJNI.hinge__SWIG_4(Expression.getCPtr(x), x, UnsignedVector.getCPtr(indices), indices, m), true);
  }

  public static Expression hinge(Expression x, UnsignedVector indices) {
    return new Expression(dynet_swigJNI.hinge__SWIG_5(Expression.getCPtr(x), x, UnsignedVector.getCPtr(indices), indices), true);
  }

  public static Expression hinge_dim(Expression x, UnsignedVector indices, long d, float m) {
    return new Expression(dynet_swigJNI.hinge_dim__SWIG_0(Expression.getCPtr(x), x, UnsignedVector.getCPtr(indices), indices, d, m), true);
  }

  public static Expression hinge_dim(Expression x, UnsignedVector indices, long d) {
    return new Expression(dynet_swigJNI.hinge_dim__SWIG_1(Expression.getCPtr(x), x, UnsignedVector.getCPtr(indices), indices, d), true);
  }

  public static Expression hinge_dim(Expression x, UnsignedVector indices) {
    return new Expression(dynet_swigJNI.hinge_dim__SWIG_2(Expression.getCPtr(x), x, UnsignedVector.getCPtr(indices), indices), true);
  }

  public static Expression hinge_dim(Expression x, UnsignedVectorVector indices, long d, float m) {
    return new Expression(dynet_swigJNI.hinge_dim__SWIG_3(Expression.getCPtr(x), x, UnsignedVectorVector.getCPtr(indices), indices, d, m), true);
  }

  public static Expression hinge_dim(Expression x, UnsignedVectorVector indices, long d) {
    return new Expression(dynet_swigJNI.hinge_dim__SWIG_4(Expression.getCPtr(x), x, UnsignedVectorVector.getCPtr(indices), indices, d), true);
  }

  public static Expression hinge_dim(Expression x, UnsignedVectorVector indices) {
    return new Expression(dynet_swigJNI.hinge_dim__SWIG_5(Expression.getCPtr(x), x, UnsignedVectorVector.getCPtr(indices), indices), true);
  }

  public static Expression sparsemax(Expression x) {
    return new Expression(dynet_swigJNI.sparsemax(Expression.getCPtr(x), x), true);
  }

  public static Expression sparsemax_loss(Expression x, UnsignedVector target_support) {
    return new Expression(dynet_swigJNI.sparsemax_loss(Expression.getCPtr(x), x, UnsignedVector.getCPtr(target_support), target_support), true);
  }

  public static Expression squared_norm(Expression x) {
    return new Expression(dynet_swigJNI.squared_norm(Expression.getCPtr(x), x), true);
  }

  public static Expression l2_norm(Expression x) {
    return new Expression(dynet_swigJNI.l2_norm(Expression.getCPtr(x), x), true);
  }

  public static Expression squared_distance(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.squared_distance(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression l1_distance(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.l1_distance(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression huber_distance(Expression x, Expression y, float c) {
    return new Expression(dynet_swigJNI.huber_distance__SWIG_0(Expression.getCPtr(x), x, Expression.getCPtr(y), y, c), true);
  }

  public static Expression huber_distance(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.huber_distance__SWIG_1(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression binary_log_loss(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.binary_log_loss(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression pairwise_rank_loss(Expression x, Expression y, float m) {
    return new Expression(dynet_swigJNI.pairwise_rank_loss__SWIG_0(Expression.getCPtr(x), x, Expression.getCPtr(y), y, m), true);
  }

  public static Expression pairwise_rank_loss(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.pairwise_rank_loss__SWIG_1(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression poisson_loss(Expression x, long y) {
    return new Expression(dynet_swigJNI.poisson_loss__SWIG_0(Expression.getCPtr(x), x, y), true);
  }

  public static Expression poisson_loss(Expression x, SWIGTYPE_p_unsigned_int py) {
    return new Expression(dynet_swigJNI.poisson_loss__SWIG_1(Expression.getCPtr(x), x, SWIGTYPE_p_unsigned_int.getCPtr(py)), true);
  }

  public static Expression nobackprop(Expression x) {
    return new Expression(dynet_swigJNI.nobackprop(Expression.getCPtr(x), x), true);
  }

  public static Expression flip_gradient(Expression x) {
    return new Expression(dynet_swigJNI.flip_gradient(Expression.getCPtr(x), x), true);
  }

  public static Expression reshape(Expression x, Dim d) {
    return new Expression(dynet_swigJNI.reshape(Expression.getCPtr(x), x, Dim.getCPtr(d), d), true);
  }

  public static Expression transpose(Expression x) {
    return new Expression(dynet_swigJNI.transpose(Expression.getCPtr(x), x), true);
  }

  public static Expression select_rows(Expression x, UnsignedVector rows) {
    return new Expression(dynet_swigJNI.select_rows(Expression.getCPtr(x), x, UnsignedVector.getCPtr(rows), rows), true);
  }

  public static Expression select_cols(Expression x, UnsignedVector cols) {
    return new Expression(dynet_swigJNI.select_cols(Expression.getCPtr(x), x, UnsignedVector.getCPtr(cols), cols), true);
  }

  public static Expression pick(Expression x, long v, long d) {
    return new Expression(dynet_swigJNI.pick__SWIG_0(Expression.getCPtr(x), x, v, d), true);
  }

  public static Expression pick(Expression x, long v) {
    return new Expression(dynet_swigJNI.pick__SWIG_1(Expression.getCPtr(x), x, v), true);
  }

  public static Expression pick(Expression x, UnsignedVector v, long d) {
    return new Expression(dynet_swigJNI.pick__SWIG_2(Expression.getCPtr(x), x, UnsignedVector.getCPtr(v), v, d), true);
  }

  public static Expression pick(Expression x, UnsignedVector v) {
    return new Expression(dynet_swigJNI.pick__SWIG_3(Expression.getCPtr(x), x, UnsignedVector.getCPtr(v), v), true);
  }

  public static Expression pick(Expression x, SWIGTYPE_p_unsigned_int v, long d) {
    return new Expression(dynet_swigJNI.pick__SWIG_4(Expression.getCPtr(x), x, SWIGTYPE_p_unsigned_int.getCPtr(v), d), true);
  }

  public static Expression pick(Expression x, SWIGTYPE_p_unsigned_int v) {
    return new Expression(dynet_swigJNI.pick__SWIG_5(Expression.getCPtr(x), x, SWIGTYPE_p_unsigned_int.getCPtr(v)), true);
  }

  public static Expression pick_range(Expression x, long s, long e, long d) {
    return new Expression(dynet_swigJNI.pick_range__SWIG_0(Expression.getCPtr(x), x, s, e, d), true);
  }

  public static Expression pick_range(Expression x, long s, long e) {
    return new Expression(dynet_swigJNI.pick_range__SWIG_1(Expression.getCPtr(x), x, s, e), true);
  }

  public static Expression pick_batch_elem(Expression x, long v) {
    return new Expression(dynet_swigJNI.pick_batch_elem(Expression.getCPtr(x), x, v), true);
  }

  public static Expression pick_batch_elems(Expression x, UnsignedVector v) {
    return new Expression(dynet_swigJNI.pick_batch_elems(Expression.getCPtr(x), x, UnsignedVector.getCPtr(v), v), true);
  }

  public static Expression concatenate_to_batch(ExpressionVector xs) {
    return new Expression(dynet_swigJNI.concatenate_to_batch(ExpressionVector.getCPtr(xs), xs), true);
  }

  public static Expression strided_select(Expression x, IntVector strides, IntVector from, IntVector to) {
    return new Expression(dynet_swigJNI.strided_select__SWIG_0(Expression.getCPtr(x), x, IntVector.getCPtr(strides), strides, IntVector.getCPtr(from), from, IntVector.getCPtr(to), to), true);
  }

  public static Expression strided_select(Expression x, IntVector strides, IntVector from) {
    return new Expression(dynet_swigJNI.strided_select__SWIG_1(Expression.getCPtr(x), x, IntVector.getCPtr(strides), strides, IntVector.getCPtr(from), from), true);
  }

  public static Expression strided_select(Expression x, IntVector strides) {
    return new Expression(dynet_swigJNI.strided_select__SWIG_2(Expression.getCPtr(x), x, IntVector.getCPtr(strides), strides), true);
  }

  public static Expression concatenate_cols(ExpressionVector xs) {
    return new Expression(dynet_swigJNI.concatenate_cols(ExpressionVector.getCPtr(xs), xs), true);
  }

  public static Expression concatenate(ExpressionVector xs, long d) {
    return new Expression(dynet_swigJNI.concatenate__SWIG_0(ExpressionVector.getCPtr(xs), xs, d), true);
  }

  public static Expression concatenate(ExpressionVector xs) {
    return new Expression(dynet_swigJNI.concatenate__SWIG_1(ExpressionVector.getCPtr(xs), xs), true);
  }

  public static Expression max_dim(Expression x, long d) {
    return new Expression(dynet_swigJNI.max_dim__SWIG_0(Expression.getCPtr(x), x, d), true);
  }

  public static Expression max_dim(Expression x) {
    return new Expression(dynet_swigJNI.max_dim__SWIG_1(Expression.getCPtr(x), x), true);
  }

  public static Expression min_dim(Expression x, long d) {
    return new Expression(dynet_swigJNI.min_dim__SWIG_0(Expression.getCPtr(x), x, d), true);
  }

  public static Expression min_dim(Expression x) {
    return new Expression(dynet_swigJNI.min_dim__SWIG_1(Expression.getCPtr(x), x), true);
  }

  public static Expression noise(Expression x, float stddev) {
    return new Expression(dynet_swigJNI.noise(Expression.getCPtr(x), x, stddev), true);
  }

  public static Expression dropout(Expression x, float p) {
    return new Expression(dynet_swigJNI.dropout(Expression.getCPtr(x), x, p), true);
  }

  public static Expression dropout_dim(Expression x, long d, float p) {
    return new Expression(dynet_swigJNI.dropout_dim(Expression.getCPtr(x), x, d, p), true);
  }

  public static Expression dropout_batch(Expression x, float p) {
    return new Expression(dynet_swigJNI.dropout_batch(Expression.getCPtr(x), x, p), true);
  }

  public static Expression block_dropout(Expression x, float p) {
    return new Expression(dynet_swigJNI.block_dropout(Expression.getCPtr(x), x, p), true);
  }

  public static Expression filter1d_narrow(Expression x, Expression f) {
    return new Expression(dynet_swigJNI.filter1d_narrow(Expression.getCPtr(x), x, Expression.getCPtr(f), f), true);
  }

  public static Expression kmax_pooling(Expression x, long k) {
    return new Expression(dynet_swigJNI.kmax_pooling(Expression.getCPtr(x), x, k), true);
  }

  public static Expression fold_rows(Expression x, long nrows) {
    return new Expression(dynet_swigJNI.fold_rows__SWIG_0(Expression.getCPtr(x), x, nrows), true);
  }

  public static Expression fold_rows(Expression x) {
    return new Expression(dynet_swigJNI.fold_rows__SWIG_1(Expression.getCPtr(x), x), true);
  }

  public static Expression average_cols(Expression x) {
    return new Expression(dynet_swigJNI.average_cols(Expression.getCPtr(x), x), true);
  }

  public static Expression kmh_ngram(Expression x, long n) {
    return new Expression(dynet_swigJNI.kmh_ngram(Expression.getCPtr(x), x, n), true);
  }

  public static Expression conv2d(Expression x, Expression f, UnsignedVector stride, boolean is_valid) {
    return new Expression(dynet_swigJNI.conv2d__SWIG_0(Expression.getCPtr(x), x, Expression.getCPtr(f), f, UnsignedVector.getCPtr(stride), stride, is_valid), true);
  }

  public static Expression conv2d(Expression x, Expression f, UnsignedVector stride) {
    return new Expression(dynet_swigJNI.conv2d__SWIG_1(Expression.getCPtr(x), x, Expression.getCPtr(f), f, UnsignedVector.getCPtr(stride), stride), true);
  }

  public static Expression conv2d(Expression x, Expression f, Expression b, UnsignedVector stride, boolean is_valid) {
    return new Expression(dynet_swigJNI.conv2d__SWIG_2(Expression.getCPtr(x), x, Expression.getCPtr(f), f, Expression.getCPtr(b), b, UnsignedVector.getCPtr(stride), stride, is_valid), true);
  }

  public static Expression conv2d(Expression x, Expression f, Expression b, UnsignedVector stride) {
    return new Expression(dynet_swigJNI.conv2d__SWIG_3(Expression.getCPtr(x), x, Expression.getCPtr(f), f, Expression.getCPtr(b), b, UnsignedVector.getCPtr(stride), stride), true);
  }

  public static Expression maxpooling2d(Expression x, UnsignedVector ksize, UnsignedVector stride, boolean is_valid) {
    return new Expression(dynet_swigJNI.maxpooling2d__SWIG_0(Expression.getCPtr(x), x, UnsignedVector.getCPtr(ksize), ksize, UnsignedVector.getCPtr(stride), stride, is_valid), true);
  }

  public static Expression maxpooling2d(Expression x, UnsignedVector ksize, UnsignedVector stride) {
    return new Expression(dynet_swigJNI.maxpooling2d__SWIG_1(Expression.getCPtr(x), x, UnsignedVector.getCPtr(ksize), ksize, UnsignedVector.getCPtr(stride), stride), true);
  }

  public static Expression contract3d_1d(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.contract3d_1d__SWIG_0(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression contract3d_1d_1d(Expression x, Expression y, Expression z) {
    return new Expression(dynet_swigJNI.contract3d_1d_1d__SWIG_0(Expression.getCPtr(x), x, Expression.getCPtr(y), y, Expression.getCPtr(z), z), true);
  }

  public static Expression contract3d_1d_1d(Expression x, Expression y, Expression z, Expression b) {
    return new Expression(dynet_swigJNI.contract3d_1d_1d__SWIG_1(Expression.getCPtr(x), x, Expression.getCPtr(y), y, Expression.getCPtr(z), z, Expression.getCPtr(b), b), true);
  }

  public static Expression contract3d_1d(Expression x, Expression y, Expression b) {
    return new Expression(dynet_swigJNI.contract3d_1d__SWIG_1(Expression.getCPtr(x), x, Expression.getCPtr(y), y, Expression.getCPtr(b), b), true);
  }

  public static Expression inverse(Expression x) {
    return new Expression(dynet_swigJNI.inverse(Expression.getCPtr(x), x), true);
  }

  public static Expression logdet(Expression x) {
    return new Expression(dynet_swigJNI.logdet(Expression.getCPtr(x), x), true);
  }

  public static Expression trace_of_product(Expression x, Expression y) {
    return new Expression(dynet_swigJNI.trace_of_product(Expression.getCPtr(x), x, Expression.getCPtr(y), y), true);
  }

  public static Expression layer_norm(Expression x, Expression g, Expression b) {
    return new Expression(dynet_swigJNI.layer_norm(Expression.getCPtr(x), x, Expression.getCPtr(g), g, Expression.getCPtr(b), b), true);
  }

  public static Expression weight_norm(Expression w, Expression g) {
    return new Expression(dynet_swigJNI.weight_norm(Expression.getCPtr(w), w, Expression.getCPtr(g), g), true);
  }

  public static void setDefault_device(Device value) {
    dynet_swigJNI.default_device_set(Device.getCPtr(value), value);
  }

  public static Device getDefault_device() {
    long cPtr = dynet_swigJNI.default_device_get();
    return (cPtr == 0) ? null : new Device(cPtr, false);
  }

  public static void initialize(DynetParams params) {
    dynet_swigJNI.initialize__SWIG_0(DynetParams.getCPtr(params), params);
  }

  public static void initialize(SWIGTYPE_p_int argc, SWIGTYPE_p_p_p_char argv, boolean shared_parameters) {
    dynet_swigJNI.initialize__SWIG_1(SWIGTYPE_p_int.getCPtr(argc), SWIGTYPE_p_p_p_char.getCPtr(argv), shared_parameters);
  }

  public static void initialize(SWIGTYPE_p_int argc, SWIGTYPE_p_p_p_char argv) {
    dynet_swigJNI.initialize__SWIG_2(SWIGTYPE_p_int.getCPtr(argc), SWIGTYPE_p_p_p_char.getCPtr(argv));
  }

  public static void cleanup() {
    dynet_swigJNI.cleanup();
  }

  public static void reset_rng(long seed) {
    dynet_swigJNI.reset_rng(seed);
  }

}
