/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.cmu.dynet.internal;

public class Device {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Device(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Device obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

  public void setDevice_id(int value) {
    dynet_swigJNI.Device_device_id_set(swigCPtr, this, value);
  }

  public int getDevice_id() {
    return dynet_swigJNI.Device_device_id_get(swigCPtr, this);
  }

  public void setType(DeviceType value) {
    dynet_swigJNI.Device_type_set(swigCPtr, this, value.swigValue());
  }

  public DeviceType getType() {
    return DeviceType.swigToEnum(dynet_swigJNI.Device_type_get(swigCPtr, this));
  }

  public void setMem(SWIGTYPE_p_dynet__MemAllocator value) {
    dynet_swigJNI.Device_mem_set(swigCPtr, this, SWIGTYPE_p_dynet__MemAllocator.getCPtr(value));
  }

  public SWIGTYPE_p_dynet__MemAllocator getMem() {
    long cPtr = dynet_swigJNI.Device_mem_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_dynet__MemAllocator(cPtr, false);
  }

  public void setKSCALAR_MINUSONE(SWIGTYPE_p_float value) {
    dynet_swigJNI.Device_kSCALAR_MINUSONE_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  public SWIGTYPE_p_float getKSCALAR_MINUSONE() {
    long cPtr = dynet_swigJNI.Device_kSCALAR_MINUSONE_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public void setKSCALAR_ONE(SWIGTYPE_p_float value) {
    dynet_swigJNI.Device_kSCALAR_ONE_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  public SWIGTYPE_p_float getKSCALAR_ONE() {
    long cPtr = dynet_swigJNI.Device_kSCALAR_ONE_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public void setKSCALAR_ZERO(SWIGTYPE_p_float value) {
    dynet_swigJNI.Device_kSCALAR_ZERO_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  public SWIGTYPE_p_float getKSCALAR_ZERO() {
    long cPtr = dynet_swigJNI.Device_kSCALAR_ZERO_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public void setName(String value) {
    dynet_swigJNI.Device_name_set(swigCPtr, this, value);
  }

  public String getName() {
    return dynet_swigJNI.Device_name_get(swigCPtr, this);
  }

  public DeviceMempoolSizes mark(ComputationGraph cg) {
    return new DeviceMempoolSizes(dynet_swigJNI.Device_mark(swigCPtr, this, ComputationGraph.getCPtr(cg), cg), true);
  }

  public void revert(DeviceMempoolSizes cp) {
    dynet_swigJNI.Device_revert(swigCPtr, this, DeviceMempoolSizes.getCPtr(cp), cp);
  }

  public void allocate_tensor(DeviceMempool mem_pool, Tensor tensor) {
    dynet_swigJNI.Device_allocate_tensor(swigCPtr, this, mem_pool.swigValue(), Tensor.getCPtr(tensor), tensor);
  }

  public void setPools(SWIGTYPE_p_std__vectorT_dynet__AlignedMemoryPool_p_t value) {
    dynet_swigJNI.Device_pools_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_dynet__AlignedMemoryPool_p_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_dynet__AlignedMemoryPool_p_t getPools() {
    long cPtr = dynet_swigJNI.Device_pools_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__vectorT_dynet__AlignedMemoryPool_p_t(cPtr, false);
  }

}
