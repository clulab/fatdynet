/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.cmu.dynet.internal;

public class Dim {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Dim(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Dim obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        dynet_swigJNI.delete_Dim(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Dim(long... values) {
    this();

    int i = 0;
    for (long l: values) {
      this.resize(i + 1);
      this.set(i, l);
      i++;
    }
  }

  @Override
  public boolean equals(Object obj) {
    // must be the same class
    if (obj instanceof Dim) {
      Dim other = (Dim)obj;
      // must have the same shapes
      if (this.ndims() != other.ndims() ||
          this.batch_elems() != other.batch_elems()) return false;

      // must have the same values for every dim
      for (int i = 0; i < this.ndims(); i++) {
        if (this.get(i) != other.get(i)) return false;
      }

      return true;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 17 * (int)this.ndims() + (int)this.batch_elems();
    for (int i = 0; i < this.ndims(); i++) {
      hash = hash * 31 + (int)this.get(i);
    }
    return hash;
  }

  public Dim() {
    this(dynet_swigJNI.new_Dim__SWIG_0(), true);
  }

  public Dim(LongVector x) {
    this(dynet_swigJNI.new_Dim__SWIG_1(LongVector.getCPtr(x), x), true);
  }

  public Dim(LongVector x, long b) {
    this(dynet_swigJNI.new_Dim__SWIG_2(LongVector.getCPtr(x), x, b), true);
  }

  public long size() {
    return dynet_swigJNI.Dim_size__SWIG_0(swigCPtr, this);
  }

  public long batch_size() {
    return dynet_swigJNI.Dim_batch_size(swigCPtr, this);
  }

  public long sum_dims() {
    return dynet_swigJNI.Dim_sum_dims(swigCPtr, this);
  }

  public Dim truncate() {
    return new Dim(dynet_swigJNI.Dim_truncate(swigCPtr, this), true);
  }

  public Dim single_batch() {
    return new Dim(dynet_swigJNI.Dim_single_batch(swigCPtr, this), true);
  }

  public void resize(long i) {
    dynet_swigJNI.Dim_resize(swigCPtr, this, i);
  }

  public long ndims() {
    return dynet_swigJNI.Dim_ndims(swigCPtr, this);
  }

  public long rows() {
    return dynet_swigJNI.Dim_rows(swigCPtr, this);
  }

  public long cols() {
    return dynet_swigJNI.Dim_cols(swigCPtr, this);
  }

  public long batch_elems() {
    return dynet_swigJNI.Dim_batch_elems(swigCPtr, this);
  }

  public void set(long i, long s) {
    dynet_swigJNI.Dim_set(swigCPtr, this, i, s);
  }

  public long get(long i) {
    return dynet_swigJNI.Dim_get(swigCPtr, this, i);
  }

  public long size(long i) {
    return dynet_swigJNI.Dim_size__SWIG_1(swigCPtr, this, i);
  }

  public void delete_dim(long i) {
    dynet_swigJNI.Dim_delete_dim(swigCPtr, this, i);
  }

  public Dim transpose() {
    return new Dim(dynet_swigJNI.Dim_transpose(swigCPtr, this), true);
  }

}
